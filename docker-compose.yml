version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: brewget-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-brewget}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-brewget_dev_password}
      POSTGRES_DB: brewget
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-brewget}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - brewget-network

  auth-service:
    build:
      context: ./backend
      dockerfile: auth-service/Dockerfile.dev
    container_name: brewget-auth-service
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-brewget}:${POSTGRES_PASSWORD:-brewget_dev_password}@postgres:5432/brewget_auth
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      AUTH_HTTP_PORT: "8000"
      AUTH_GRPC_PORT: "9000"
      EMAIL_GRPC_HOSTNAME: email-service:9001
      FRONTEND_HOSTNAME: http://localhost:3000
      CORS_URL: http://localhost:3000
      RUST_LOG: ${RUST_LOG:-info}
      TURNSTILE_SECRET: ${TURNSTILE_SECRET:-1x0000000000000000000000000000000AA}
    ports:
      - "8000:8000"
      - "9000:9000"
    volumes:
      - ./backend:/workspace
      - rust_cache:/workspace/target
      - cargo_registry:/usr/local/cargo/registry
    depends_on:
      postgres:
        condition: service_healthy
      email-service:
        condition: service_started
    networks:
      - brewget-network
    develop:
      watch:
        - path: ./backend/auth-service/src
          action: rebuild
        - path: ./backend/shared-types/src
          action: rebuild
        - path: ./backend/proto
          action: rebuild

  email-service:
    build:
      context: ./backend
      dockerfile: email-service/Dockerfile.dev
    container_name: brewget-email-service
    environment:
      EMAIL_GRPC_PORT: "9001"
      SMTP_EMAIL: ${SMTP_EMAIL:-noreply@localhost}
      SMTP_NAME: ${SMTP_NAME:-BrewGet Dev}
      SMTP_RELAY: ${SMTP_RELAY:-mailhog:1025}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      RUST_LOG: ${RUST_LOG:-info}
    ports:
      - "9001:9001"
    volumes:
      - ./backend:/workspace
      - rust_cache:/workspace/target
      - cargo_registry:/usr/local/cargo/registry
    networks:
      - brewget-network
    develop:
      watch:
        - path: ./backend/email-service/src
          action: rebuild
        - path: ./backend/proto
          action: rebuild

  settings-service:
    build:
      context: ./backend
      dockerfile: settings-service/Dockerfile.dev
    container_name: brewget-settings-service
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-brewget}:${POSTGRES_PASSWORD:-brewget_dev_password}@postgres:5432/brewget_settings
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      SETTINGS_HTTP_PORT: "8001"
      FRONTEND_HOSTNAME: http://localhost:3000
      CORS_URL: http://localhost:3000
      RUST_LOG: ${RUST_LOG:-info}
    ports:
      - "8001:8001"
    volumes:
      - ./backend:/workspace
      - rust_cache:/workspace/target
      - cargo_registry:/usr/local/cargo/registry
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - brewget-network
    develop:
      watch:
        - path: ./backend/settings-service/src
          action: rebuild
        - path: ./backend/shared-types/src
          action: rebuild
        - path: ./backend/proto
          action: rebuild

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: brewget-frontend
    environment:
      VITE_API_URL: http://localhost:80
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - brewget-network
    develop:
      watch:
        - path: ./frontend/package.json
          action: rebuild
        - path: ./frontend/src
          action: sync
          target: /app/src

  nginx:
    image: nginx:alpine
    container_name: brewget-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - auth-service
      - settings-service
      - frontend
    networks:
      - brewget-network

  mailhog:
    image: mailhog/mailhog:latest
    container_name: brewget-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - brewget-network

volumes:
  postgres_data:
  rust_cache:
  cargo_registry:

networks:
  brewget-network:
    driver: bridge
