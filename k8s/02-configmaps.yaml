---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: brewget
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;

    events {
        worker_connections 1024;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Enable gzip compression
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # Include virtual host configs
        include /etc/nginx/conf.d/*.conf;
    }

  default.conf: |
    upstream frontend_upstream {
        server frontend:80;
    }

    upstream auth_upstream {
        server auth-service:8000;
    }

    upstream settings_upstream {
        server settings-service:8001;
    }

    server {
        listen 80;
        server_name localhost;

        # Frontend
        location / {
            proxy_pass http://frontend_upstream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Auth Service API
        location /api/auth/ {
            proxy_pass http://auth_upstream/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Settings Service API
        location /api/settings/ {
            proxy_pass http://settings_upstream/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: brewget
data:
  init-databases.sh: |
    #!/bin/bash
    set -e

    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        -- Create databases if they don't exist
        SELECT 'CREATE DATABASE brewget_auth'
        WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'brewget_auth')\gexec
        
        SELECT 'CREATE DATABASE brewget_settings'
        WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'brewget_settings')\gexec
    EOSQL

    echo "Databases created successfully"
